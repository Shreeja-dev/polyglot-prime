<channel version="4.5.3">
  <id>eeaee164-d407-4114-a1b2-11edccc1c12d</id>
  <nextMetaDataId>12</nextMetaDataId>
  <name>CcdaBundleValidate</name>
  <description>Version: 0.4.0</description>
  <revision>14</revision>
  <sourceConnector version="4.5.3">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.5.3">
      <pluginProperties>
        <com.mirth.connect.plugins.ssl.SSLSettingsProperties version="4.5.3">
  <sslEnabled>false</sslEnabled>
          <mutualTlsEnabled>false</mutualTlsEnabled>
          <verifyHostname>false</verifyHostname>
          <keystorePath/>
          <keystorePassword/>
          <certAlias/>
          <certPassword/>
          <truststorePath/>
          <truststorePassword/>
          <tls13>true</tls13>
          <tls12>true</tls12>
          <tls11>true</tls11>
          <keystoreType/>
          <truststoreType/>
          <keystoreSettingFromSystem>false</keystoreSettingFromSystem>
          <keystoreUid/>
          <myCertificateAlias/>
          <truststoreSettingFromSystem>false</truststoreSettingFromSystem>
          <truststoreUid/>
        </com.mirth.connect.plugins.ssl.SSLSettingsProperties>
        <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.5.3">
  <authType>NONE</authType>
        </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
      </pluginProperties>
      <listenerConnectorProperties version="4.5.3">
        <host>0.0.0.0</host>
        <port>9003</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="4.5.3">
        <responseVariable>finalResponse</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <xmlBody>false</xmlBody>
      <parseMultipart>true</parseMultipart>
      <includeMetadata>false</includeMetadata>
      <binaryMimeTypes>text/xml</binaryMimeTypes>
      <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
      <responseContentType>application/json</responseContentType>
      <responseDataTypeBinary>false</responseDataTypeBinary>
      <responseStatusCode>200</responseStatusCode>
      <responseHeaders class="linked-hash-map">
        <entry>
          <string>Access-Control-Allow-Origin</string>
          <list>
            <string>https://hub.dev.techbd.org</string>
          </list>
        </entry>
        <entry>
          <string>Access-Control-Allow-Methods</string>
          <list>
            <string>GET, POST, OPTIONS</string>
          </list>
        </entry>
        <entry>
          <string>Access-Control-Allow-Headers</string>
          <list>
            <string>Content-Type, Authorization, X-TechBD-Tenant-ID, User-Agent, X-TechBD-REMOTE-IP, X-TechBD-Override-Request-URI, accept </string>
          </list>
        </entry>
        <entry>
          <string>Access-Control-Expose-Headers</string>
          <list>
            <string>Location, X-TechBD-Tenant-ID, User-Agent, X-TechBD-REMOTE-IP, X-TechBD-Override-Request-URI</string>
          </list>
        </entry>
      </responseHeaders>
      <responseHeadersVariable></responseHeadersVariable>
      <useResponseHeadersVariable>false</useResponseHeadersVariable>
      <charset>UTF-8</charset>
      <contextPath>/</contextPath>
      <timeout>300000</timeout>
      <staticResources/>
    </properties>
    <transformer version="4.5.3">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.5.3">
          <name>Common JS functions</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>/**
* Replacer function to remove empty values
*/&#xd;function removeEmptyValues(key, value) {&#xd;  // Remove values that are empty strings, null, undefined, or empty objects/arrays&#xd;  if (value === &quot;&quot; || value === null || value === undefined || &#xd;      (typeof value === &quot;object&quot; &amp;&amp; Object.keys(value).length === 0) ||&#xd;      (Array.isArray(value) &amp;&amp; value.length === 0)) {&#xd;    return undefined; // Exclude the key from the result&#xd;  }&#xd;  return value; // Keep the value as is&#xd;}


/**
* Util function to generate json string wit hstatus and message
*/
function createJsonResponse(status, message) {
    return JSON.stringify({ status: status, message: message });
}

/**
* Util function to set error response.
*/
function setErrorResponse(statusCode, errorMessage) {
    responseMap.put(&apos;status&apos;, String(statusCode)); // Convert statusCode to string
    responseMap.put(&apos;message&apos;, errorMessage);
    responseMap.put(&apos;finalResponse&apos;, createJsonResponse(statusCode, errorMessage));
}

/*
* Util function to generate json error message
*/
function getJsonInvalidOperationOutcome(errorMsg, code) {
	return { &quot;OperationOutcome&quot;: {
                    &quot;validationResults&quot;: [
                        {
                            &quot;operationOutcome&quot;: {
                                &quot;resourceType&quot;: &quot;OperationOutcome&quot;,
                                &quot;issue&quot;: [
                                    {
                                        &quot;severity&quot;: &quot;error&quot;,
                                        &quot;code&quot;: code,
                                        &quot;details&quot;: {
                                            &quot;text&quot;: errorMsg
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            };
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.5.3">
          <name>Validate HTTP Request and collect headers</name>
          <sequenceNumber>1</sequenceNumber>
          <enabled>true</enabled>
          <script>logger.info(&quot;HTTP request validation started.&quot;);

var requestedPath = sourceMap.get(&apos;contextPath&apos;);
logger.info(&quot;Request URL: &quot; + requestedPath);

if (requestedPath == &quot;/&quot;) {
	return;
}

///////////////////////////////////////////////////////////////////////////
// Access the required header values using getHeader method
var tenantId = $(&apos;headers&apos;).getHeader(&apos;X-TechBD-Tenant-ID&apos;);
logger.info(&quot;X-TechBD-Tenant-ID: &quot; + tenantId);

// Check if the header is null or empty
if (tenantId == null || String(tenantId).trim() === &quot;&quot;) {
   // Log the error for debugging
   var errorMessage = &apos;Bad Request: Missing required header X-TechBD-Tenant-ID&apos;;
   logger.error(errorMessage);
   setErrorResponse(400, errorMessage); // Set the HTTP response status to 400 (Bad Request)
   throw errorMessage; // Stop further processing by throwing an exception
}

// Store the tenant ID in the globalMap for further use
globalMap.put(&apos;tenantId&apos;, tenantId);


// Retrieve the Content-Type header
var contentType = $(&apos;headers&apos;).getHeader(&apos;Content-Type&apos;);
// Check if the Content-Type is &apos;multipart/form-data&apos; and contains a boundary
if (!contentType || !contentType.startsWith(&apos;multipart/form-data&apos;) /*|| !contentType.includes(&apos;boundary=&apos;)*/) {
   var errorMessage = &apos;Content-Type is not multipart/form-data or not contains boundary details.&apos;;
   logger.error(errorMessage);
   setErrorResponse(400, errorMessage); // Set the HTTP response status to 400 (Bad Request)
   throw errorMessage; // Stop further processing by throwing an exception
}

// Get User-Agent header to set at HTTP Writer not to show &apos;Mirth connect&apos; as Agent at the application side.
var userAgent = $(&apos;headers&apos;).getHeader(&apos;User-Agent&apos;);
globalMap.put(&apos;userAgent&apos;, userAgent);
logger.info(&quot;User-Agent: &quot; + userAgent);

globalMap.put(&apos;uri&apos;, sourceMap.get(&apos;uri&apos;));
globalMap.put(&apos;contextPath&apos;, sourceMap.get(&apos;contextPath&apos;));

/////***************************************************************************newly added
//** Get CIN, NPI and TIN from headers for CCDA FHIR Bundle - Required for FHIR Bundle conversion only**//
if (requestedPath == &quot;/ccda/Bundle/&quot; || requestedPath == &quot;/ccda/Bundle&quot;) {
	//1.CIN
	checkRequiredHeader(&apos;X-TechBD-CIN&apos;, &apos;X-TechBD-CIN&apos;, true, &apos;patientCIN&apos;);
	
	//2.NPI
	var organizationNPI = $(&apos;headers&apos;).getHeader(&apos;X-TechBD-OrgNPI&apos;);
	logger.info(&quot;X-TechBD-OrgNPI: &quot; + organizationNPI);
	
	//3.TIN
	var organizationTIN = $(&apos;headers&apos;).getHeader(&apos;X-TechBD-OrgTIN&apos;);
	logger.info(&quot;X-TechBD-OrgTIN: &quot; + organizationTIN);
	
	// Check if both are missing â€” only then it&apos;s an error
	if ((organizationNPI == null || String(organizationNPI).trim() === &quot;&quot;) &amp;&amp;
	    (organizationTIN == null || String(organizationTIN).trim() === &quot;&quot;)) {
	    missingHeaders.push(&quot;Missing required header X-TechBD-OrgNPI and X-TechBD-OrgTIN. One is mandatory.&quot;);
	} else {
	    if (organizationNPI &amp;&amp; String(organizationNPI).trim() !== &quot;&quot;) {
	        channelMap.put(&apos;organizationNPI&apos;, organizationNPI);
	    }
	    if (organizationTIN &amp;&amp; String(organizationTIN).trim() !== &quot;&quot;) {
	        channelMap.put(&apos;organizationTIN&apos;, organizationTIN);
	    }
	}
	
	//4. Facility Code
	checkRequiredHeader(&apos;X-TechBD-Facility-ID&apos;, &apos;X-TechBD-Facility-ID&apos;, true, &apos;facilityID&apos;);

	//5. Encounter Type
	checkRequiredHeader(&apos;X-TechBD-Encounter-Type&apos;, &apos;X-TechBD-Encounter-Type&apos;, true, &apos;encounterType&apos;);
}
///////////////***********************************************************************
function checkRequiredHeader(headerName) {
    var headerValue = $(&apos;headers&apos;).getHeader(headerName);
    if (headerValue == null || String(headerValue).trim() === &quot;&quot;) {
        throw &quot;Missing required header: &quot; + headerName;
    }
    return headerValue;
}

///////////////////////////////////////////////////////////////////////////
// Parse the incoming request (assumes multipart form data)
var rawData = connectorMessage.getRawData();

// Check if rawData is empty
if (!rawData || rawData.trim().length === 0) {
   errorMessage = &quot;No file provided in the request.&quot;;
   setErrorResponse(400, errorMessage); // Set the HTTP response status to 400 (Bad Request)
   throw errorMessage;
}

// Parse the rawData as multipart form data
var boundary = rawData.split(&quot;\r\n&quot;)[0];
var parts = rawData.split(boundary);

// Initialize variables to store file content
var fileContent = null;

// Loop through parts to find the file part
var i = 0;
for each (var part in parts) {
   if (part.indexOf(&apos;Content-Disposition: form-data; name=&quot;file&quot;;&apos;) !== -1) {
       logger.info(&quot;Part count &quot; + ++i);
       // Extract the file content (skip headers)
       var contentStartIndex = part.indexOf(&quot;\r\n\r\n&quot;) + 4;
       fileContent = part.substring(contentStartIndex, part.lastIndexOf(&quot;\r\n&quot;));
       break;
   }
}

// Validate the file content
if (!fileContent || fileContent == &apos;&apos; || fileContent.trim().length === 0) {
   errorMessage = &quot;Uploaded file is empty or missing.&quot;;
   // Set the HTTP response status to 400 (Bad Request)
   setErrorResponse(400, errorMessage);
   throw errorMessage;
} else {
   logger.info(&quot;fileContent not null. Size: &quot; + fileContent.length + &quot; bytes.&quot;);
   globalMap.put(&apos;fileContent&apos;, fileContent);
   
}

var ccdaSchemaFolder = java.lang.System.getenv(&quot;MC_CCDA_SCHEMA_FOLDER&quot;);
if(ccdaSchemaFolder != null) {
   globalMap.put(&apos;ccdaSchemaFolder&apos;, ccdaSchemaFolder);
   logger.info(&quot;ccdaSchemaFolder: &quot; + ccdaSchemaFolder);
} else {
   var errorMessage = &apos;MC_CCDA_SCHEMA_FOLDER variable is not set&apos;;
   logger.error(errorMessage);
   setErrorResponse(500, errorMessage); // Set the HTTP response status to 500 (Server error)
   throw errorMessage; // Stop further processing by throwing an exception
}

globalMap.put(&apos;xsdFilePath&apos;, ccdaSchemaFolder + &apos;CDA.xsd&apos;);
globalMap.put(&apos;cdaPhiFilter&apos;, ccdaSchemaFolder + &apos;cda-phi-filter.xslt&apos;);
globalMap.put(&apos;cdaPhiBundle&apos;, ccdaSchemaFolder + &apos;cda-fhir-bundle.xslt&apos;);


logger.info(&quot;using xsdFilePath: &quot; + globalMap.get(&apos;xsdFilePath&apos;));
logger.info(&quot;using cdaPhiFilter: &quot; + globalMap.get(&apos;cdaPhiFilter&apos;));
logger.info(&quot;using cdaPhiBundle: &quot; + globalMap.get(&apos;cdaPhiBundle&apos;));


///////////////////////////////////////////
// Set path for schema and related files //
///////////////////////////////////////////

/*
* Util function to get vender identifier details and choose the xslt file according to the vendor
*/
function getManufacturerModelName(xmlData) {
	try {
		if (xmlData) {
			var ccdaSchemaFolder = channelMap.get(&apos;ccdaSchemaFolder&apos;);
			var xmlDoc = new XML(xmlData); // Convert XML string to XML object
			var cdaPhiFilterXsltPath = ccdaSchemaFolder + &quot;/cda-phi-filter.xslt&quot;;
			var cdaFhirBundleXsltPath = ccdaSchemaFolder + &quot;/cda-fhir-bundle.xslt&quot;;
			
			var manufacturerModelName = &apos;&apos;;
			var ehrVendor = &apos;&apos;;
			var lowerName = &apos;&apos;;
			var modelNode = &apos;&apos;;
			
			manufacturerModelName = xmlDoc.*::author.*::assignedAuthor.*::assignedAuthoringDevice.*::manufacturerModelName.toString();
			if (manufacturerModelName != undefined &amp;&amp; manufacturerModelName.toString().length &gt; 0) {
				logger.info(&quot;Extracted Manufacturer Model Name: &quot; + manufacturerModelName);
				lowerName = manufacturerModelName.toLowerCase();
			} else {
			     logger.warn(&quot;manufacturerModelName is empty&quot;);
			}
			                    
			if (lowerName.indexOf(&quot;epic&quot;) !== -1) {
			    	ehrVendor = &quot;Epic&quot;;
			    	cdaPhiFilterXsltPath = ccdaSchemaFolder + &quot;/cda-phi-filter-epic.xslt&quot;;
				cdaFhirBundleXsltPath = ccdaSchemaFolder + &quot;/cda-fhir-bundle-epic.xslt&quot;;
			} else if (lowerName.indexOf(&quot;medent&quot;) !== -1) {
			    	ehrVendor = &quot;Medent&quot;;
			    	cdaPhiFilterXsltPath = ccdaSchemaFolder + &quot;/cda-phi-filter-medent.xslt&quot;;
				cdaFhirBundleXsltPath = ccdaSchemaFolder + &quot;/cda-fhir-bundle-medent.xslt&quot;;
			} else {
			    	ehrVendor = &quot;Other&quot;;
			    	cdaPhiFilterXsltPath = ccdaSchemaFolder + &quot;/cda-phi-filter.xslt&quot;;
				cdaFhirBundleXsltPath = ccdaSchemaFolder + &quot;/cda-fhir-bundle.xslt&quot;;
			}
			
			logger.info(&quot;ehrVendor: &quot; + ehrVendor);
			channelMap.put(&apos;ehrVendor&apos;, ehrVendor);
			channelMap.put(&apos;cdaPhiFilter&apos;, cdaPhiFilterXsltPath);
			channelMap.put(&apos;cdaPhiBundle&apos;, cdaFhirBundleXsltPath);
			
			logger.info(&quot;using cdaPhiFilter: &quot; + channelMap.get(&apos;cdaPhiFilter&apos;));
			logger.info(&quot;using cdaPhiBundle: &quot; + channelMap.get(&apos;cdaPhiBundle&apos;));

		} else {
		    logger.error(&quot;xmlData is undefined or empty.&quot;);
		}
	} catch (e) {
       //logger.warn(&quot;Error parsing manufacturerModelName: &quot; + e);
       var errorMsg;
       if (e instanceof JavaException) {
          errorMsg = &quot;Error parsing manufacturerModelName: &quot; + e.toString();
       } else {
          errorMsg = &quot;Unexpected error during validation: &quot; + e.message;
       }
       logger.error(errorMsg);

       // Failure: Return an OperationOutcome JSON response with validation errors
       responseMap.put(&apos;finalResponse&apos;, JSON.stringify(getJsonInvalidOperationOutcome(errorMsg, &quot;invalid&quot;)));

       throw new Error(errorMsg);
    }
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.5.3">
          <name>step_validate_profile_urls_env_variables</name>
          <sequenceNumber>2</sequenceNumber>
          <enabled>true</enabled>
          <script>/**
* Util function to generate a hash string using sha-256 that can be used as the resource id in FHIR Bundle.
*/
importPackage(java.security);
importPackage(java.math);
importPackage(javax.xml.parsers);
importPackage(org.w3c.dom);
importPackage(javax.xml.xpath);

function generateSHA256(inputString) {
    var md = MessageDigest.getInstance(&quot;SHA-256&quot;);
    md.update(inputString.getBytes(&quot;UTF-8&quot;));   
    var digest = md.digest();
    return bytesToHex(digest);
}

function bytesToHex(byteArray) {
    var hexString = new java.lang.StringBuilder();
    for (var i = 0; i &lt; byteArray.length; i++) {
        var hex = java.lang.Integer.toHexString(0xff &amp; byteArray[i]);
        if (hex.length == 1) hexString.append(&apos;0&apos;);
        hexString.append(hex);
    }
    return hexString.toString();
}

// Define Namespace Resolver
function getElementsByTagNameNS(node, namespaceURI, localName) {
    return node.getElementsByTagNameNS(namespaceURI, localName);
}

function generateSHA256Id(resource, resourceName, resourceIdName, transformer, doc) {
    if (resource.getLength() &gt; 0) {
	    var resourceNode = resource.item(0); // Get first occurrence
	    var resourceNameElement = doc.createElementNS(&quot;urn:hl7-org:v3&quot;, &quot;resourceName&quot;);
	    resourceNameElement.setTextContent(resourceName); // Set the name dynamically  
	    resourceNode.appendChild(resourceNameElement); // Append the new element to the resource node
	    
	    var resourceText = resourceNode.getTextContent().trim(); // Extract content  
	    var sha256Hash = generateSHA256(resourceText);
	    
	    transformer.setParameter(resourceIdName, sha256Hash);
	    logger.info(resourceIdName + &quot; : &quot; + sha256Hash);
	} else {
	    logger.error(resourceName + &quot; not found in the XML.&quot;);
	}
	return transformer;
}

// Define Namespace Resolver
function setResourceIdParameters(transformer) {
    	// Parse XML
	var sourceXml = $(&apos;phi_filtered_ccd&apos;);
	
	var factory = DocumentBuilderFactory.newInstance();
	
	factory.setNamespaceAware(true);
	var builder = factory.newDocumentBuilder();
	var doc = builder.parse(new java.io.ByteArrayInputStream(sourceXml.getBytes(&quot;UTF-8&quot;)));

	// Generate Bundle resource Id
	var bunldle = doc.getElementsByTagNameNS(&quot;urn:hl7-org:v3&quot;, &quot;ClinicalDocument&quot;);
	transformer = generateSHA256Id(bunldle, &quot;ClinicalDocument&quot;, &quot;bundleId&quot;, transformer, doc);
	
	// Extract `patientRole`
	var patientRoles = doc.getElementsByTagNameNS(&quot;urn:hl7-org:v3&quot;, &quot;patientRole&quot;);
	transformer = generateSHA256Id(patientRoles, &quot;patientRole&quot;, &quot;patientResourceId&quot;, transformer, doc);
	
	// Extract `consent`
	var consent = doc.getElementsByTagNameNS(&quot;urn:hl7-org:v3&quot;, &quot;consent&quot;);
	transformer = generateSHA256Id(consent, &quot;consent&quot;, &quot;consentResourceId&quot;, transformer, doc);
	
	// Extract `author (organization)`
	var author = doc.getElementsByTagNameNS(&quot;urn:hl7-org:v3&quot;, &quot;author&quot;);
	transformer = generateSHA256Id(author, &quot;Author&quot;, &quot;organizationResourceId&quot;, transformer, doc);
	
	// Extract `Questionnaire`
	var Questionnaire = doc.getElementsByTagNameNS(&quot;urn:hl7-org:v3&quot;, &quot;Questionnaire&quot;);
	transformer = generateSHA256Id(Questionnaire, &quot;Questionnaire&quot;, &quot;questionnaireResourceId&quot;, transformer, doc);	
	
	// Extract `observations`
	var observations = doc.getElementsByTagNameNS(&quot;urn:hl7-org:v3&quot;, &quot;observations&quot;);
	transformer = generateSHA256Id(observations, &quot;observations&quot;, &quot;observationResourceSha256Id&quot;, transformer, doc);	
	
	// Extract `sexualOrientation`
	var sexualOrientation = doc.getElementsByTagNameNS(&quot;urn:hl7-org:v3&quot;, &quot;sexualOrientation&quot;);
	transformer = generateSHA256Id(sexualOrientation, &quot;sexualOrientation&quot;, &quot;sexualOrientationResourceId&quot;, transformer, doc);
		
	// Extract `QuestionnaireResponse`
	if (observations.getLength() &gt; 0) {
	    var observationsNode = observations.item(0); // Get first occurrence
	    var entries = observationsNode.getElementsByTagNameNS(&quot;urn:hl7-org:v3&quot;, &quot;entry&quot;);

	    if (entries.getLength() &gt; 0) {	    	
	        var entryNode = entries.item(0);
	        var resourceNameElement = doc.createElementNS(&quot;urn:hl7-org:v3&quot;, &quot;resourceName&quot;);
	        resourceNameElement.setTextContent(&quot;QuestionnaireResponse&quot;); // Set the name dynamically  
	        entryNode.appendChild(resourceNameElement); // Append the new element to the resource node	 
	               	        
	        var entryText = entryNode.getTextContent().trim();
	        var sha256Hash = generateSHA256(entryText);
	        transformer.setParameter(&quot;questionnaireResponseResourceSha256Id&quot;, sha256Hash);
	        logger.info(&quot;questionnaireResponseResourceSha256Id : &quot; + sha256Hash);
	    } else {
	        logger.error(&quot;No entry found inside observations.&quot;);
	    }
	} else {
	    logger.error(&quot;Questionnaire Response Resource not found in the XML.&quot;);
	}

	// Extract `Encounter`
	var encounter = doc.getElementsByTagNameNS(&quot;urn:hl7-org:v3&quot;, &quot;encompassingEncounter&quot;);
	if (encounter.getLength() &gt; 0) {
	    transformer = generateSHA256Id(encounter, &quot;encounter&quot;, &quot;encounterResourceId&quot;, transformer, doc);
	} else {
		var encounters = doc.getElementsByTagNameNS(&quot;urn:hl7-org:v3&quot;, &quot;encounters&quot;);
		if (encounters.getLength() &gt; 0) {
		    var encounterNode = encounters.item(0); // Get first occurrence
		    var encounterEntries = encounterNode.getElementsByTagNameNS(&quot;urn:hl7-org:v3&quot;, &quot;entry&quot;);
	
		    if (encounterEntries.getLength() &gt; 0) {	    	
		        var encounterEntryNode = encounterEntries.item(0);
		        var encounterResourceNameElement = doc.createElementNS(&quot;urn:hl7-org:v3&quot;, &quot;resourceName&quot;);
		        encounterResourceNameElement.setTextContent(&quot;Encounter&quot;); // Set the name dynamically  
		        encounterEntryNode.appendChild(encounterResourceNameElement); // Append the new element to the resource node	 
		               	        
		        var encounterEntryText = encounterEntryNode.getTextContent().trim();
		        var encounterSha256Hash = generateSHA256(encounterEntryText);
		        transformer.setParameter(&quot;encounterResourceId&quot;, encounterSha256Hash);
		        logger.info(&quot;encounterResourceId : &quot; + encounterSha256Hash);
		    } else {
		        logger.error(&quot;No entry found inside Encounters.&quot;);
		    }
		} else {
		    logger.error(&quot;Encounter Resource not found in the XML.&quot;);
		}
	}
	
	return transformer;
}

/**
* Util function to get FHIR resource profile URLs and set as parameters to the transformer which converts the XML file to FHIR Bundle.
*/
function set_fhir_resource_profile_urls(transformer) {
	var baseFhirUrl = java.lang.System.getenv(&quot;BASE_FHIR_URL&quot;);   
	var bundleMetaProfileUrl = java.lang.System.getenv(&quot;PROFILE_URL_BUNDLE&quot;); 
	var patientMetaProfileUrl = java.lang.System.getenv(&quot;PROFILE_URL_PATIENT&quot;); 
	var encounterMetaProfileUrl = java.lang.System.getenv(&quot;PROFILE_URL_ENCOUNTER&quot;); 
	var consentMetaProfileUrl = java.lang.System.getenv(&quot;PROFILE_URL_CONSENT&quot;); 
	var organizationMetaProfileUrl = java.lang.System.getenv(&quot;PROFILE_URL_ORGANIZATION&quot;); 
	var observationMetaProfileUrl = java.lang.System.getenv(&quot;PROFILE_URL_OBSERVATION&quot;); 
	var observationSexualOrientationMetaProfileUrl = java.lang.System.getenv(&quot;PROFILE_URL_SEXUAL_ORIENTATION&quot;); 
	var questionnaireMetaProfileUrl = java.lang.System.getenv(&quot;PROFILE_URL_QUESTIONNAIRE&quot;); 
	var questionnaireResponseMetaProfileUrl = java.lang.System.getenv(&quot;PROFILE_URL_QUESTIONNAIRE_RESPONSE&quot;); 
	var practitionerMetaProfileUrl = java.lang.System.getenv(&quot;PROFILE_URL_PRACTITIONER&quot;);

	if(baseFhirUrl != null) {
		transformer.setParameter(&quot;baseFhirUrl&quot;, baseFhirUrl);
		globalMap.put(&apos;baseFhirUrl&apos;, baseFhirUrl);
		logger.info(&quot;baseFhirUrl: &quot; + baseFhirUrl);
	} else {
		var errorMessage = &apos;BASE_FHIR_URL variable is not set&apos;;
		logger.error(errorMessage);
		setErrorResponse(500, errorMessage); // Set the HTTP response status to 500 (Server error)
		throw errorMessage; // Stop further processing by throwing an exception
	}
	
	if(bundleMetaProfileUrl != null) {
		transformer.setParameter(&quot;bundleMetaProfileUrl&quot;, bundleMetaProfileUrl);
		globalMap.put(&apos;bundleMetaProfileUrl&apos;, bundleMetaProfileUrl);
		logger.info(&quot;bundleMetaProfileUrl: &quot; + bundleMetaProfileUrl);
	} else {
		var errorMessage = &apos;PROFILE_URL_BUNDLE variable is not set&apos;;
		logger.error(errorMessage);
		setErrorResponse(500, errorMessage); // Set the HTTP response status to 500 (Server error)
		throw errorMessage; // Stop further processing by throwing an exception
	}
	
	if(patientMetaProfileUrl != null) {
		transformer.setParameter(&quot;patientMetaProfileUrl&quot;, patientMetaProfileUrl);
		globalMap.put(&apos;patientMetaProfileUrl&apos;, patientMetaProfileUrl);
		logger.info(&quot;patientMetaProfileUrl: &quot; + patientMetaProfileUrl);
	} else {
		var errorMessage = &apos;PROFILE_URL_PATIENT variable is not set&apos;;
		logger.error(errorMessage);
		setErrorResponse(500, errorMessage); // Set the HTTP response status to 500 (Server error)
		throw errorMessage; // Stop further processing by throwing an exception
	}
	
	if(encounterMetaProfileUrl != null) {
		transformer.setParameter(&quot;encounterMetaProfileUrl&quot;, encounterMetaProfileUrl);
		globalMap.put(&apos;encounterMetaProfileUrl&apos;, encounterMetaProfileUrl);
		logger.info(&quot;encounterMetaProfileUrl: &quot; + encounterMetaProfileUrl);
	} else {
		var errorMessage = &apos;PROFILE_URL_ENCOUNTER variable is not set&apos;;
		logger.error(errorMessage);
		setErrorResponse(500, errorMessage); // Set the HTTP response status to 500 (Server error)
		throw errorMessage; // Stop further processing by throwing an exception
	}
	
	if(consentMetaProfileUrl != null) {
		transformer.setParameter(&quot;consentMetaProfileUrl&quot;, consentMetaProfileUrl);
		globalMap.put(&apos;consentMetaProfileUrl&apos;, consentMetaProfileUrl);
		logger.info(&quot;consentMetaProfileUrl: &quot; + consentMetaProfileUrl);
	} else {
		var errorMessage = &apos;PROFILE_URL_CONSENT variable is not set&apos;;
		logger.error(errorMessage);
		setErrorResponse(500, errorMessage); // Set the HTTP response status to 500 (Server error)
		throw errorMessage; // Stop further processing by throwing an exception
	}
		
	if(organizationMetaProfileUrl != null) {
		transformer.setParameter(&quot;organizationMetaProfileUrl&quot;, organizationMetaProfileUrl);
		globalMap.put(&apos;organizationMetaProfileUrl&apos;, organizationMetaProfileUrl);
		logger.info(&quot;organizationMetaProfileUrl: &quot; + organizationMetaProfileUrl);
	} else {
		var errorMessage = &apos;PROFILE_URL_ORGANIZATION variable is not set&apos;;
		logger.error(errorMessage);
		setErrorResponse(500, errorMessage); // Set the HTTP response status to 500 (Server error)
		throw errorMessage; // Stop further processing by throwing an exception
	}
			
	if(observationMetaProfileUrl != null) {
		transformer.setParameter(&quot;observationMetaProfileUrl&quot;, observationMetaProfileUrl);
		globalMap.put(&apos;observationMetaProfileUrl&apos;, observationMetaProfileUrl);
		logger.info(&quot;observationMetaProfileUrl: &quot; + observationMetaProfileUrl);
	} else {
		var errorMessage = &apos;PROFILE_URL_OBSERVATION variable is not set&apos;;
		logger.error(errorMessage);
		setErrorResponse(500, errorMessage); // Set the HTTP response status to 500 (Server error)
		throw errorMessage; // Stop further processing by throwing an exception
	}
				
	if(observationSexualOrientationMetaProfileUrl != null) {
		transformer.setParameter(&quot;observationSexualOrientationMetaProfileUrl&quot;, observationSexualOrientationMetaProfileUrl);
		globalMap.put(&apos;observationSexualOrientationMetaProfileUrl&apos;, observationSexualOrientationMetaProfileUrl);
		logger.info(&quot;observationSexualOrientationMetaProfileUrl: &quot; + observationSexualOrientationMetaProfileUrl);
	} else {
		var errorMessage = &apos;PROFILE_URL_SEXUAL_ORIENTATION variable is not set&apos;;
		logger.error(errorMessage);
		setErrorResponse(500, errorMessage); // Set the HTTP response status to 500 (Server error)
		throw errorMessage; // Stop further processing by throwing an exception
	}
					
	if(questionnaireMetaProfileUrl != null) {
		transformer.setParameter(&quot;questionnaireMetaProfileUrl&quot;, questionnaireMetaProfileUrl);
		globalMap.put(&apos;questionnaireMetaProfileUrl&apos;, questionnaireMetaProfileUrl);
		logger.info(&quot;questionnaireMetaProfileUrl: &quot; + questionnaireMetaProfileUrl);
	} else {
		var errorMessage = &apos;PROFILE_URL_QUESTIONNAIRE variable is not set&apos;;
		logger.error(errorMessage);
		setErrorResponse(500, errorMessage); // Set the HTTP response status to 500 (Server error)
		throw errorMessage; // Stop further processing by throwing an exception
	}
						
	if(questionnaireResponseMetaProfileUrl != null) {
		transformer.setParameter(&quot;questionnaireResponseMetaProfileUrl&quot;, questionnaireResponseMetaProfileUrl);
		globalMap.put(&apos;questionnaireResponseMetaProfileUrl&apos;, questionnaireResponseMetaProfileUrl);
		logger.info(&quot;questionnaireResponseMetaProfileUrl: &quot; + questionnaireResponseMetaProfileUrl);
	} else {
		var errorMessage = &apos;PROFILE_URL_QUESTIONNAIRE_RESPONSE variable is not set&apos;;
		logger.error(errorMessage);
		setErrorResponse(500, errorMessage); // Set the HTTP response status to 500 (Server error)
		throw errorMessage; // Stop further processing by throwing an exception
	}
							
	if(practitionerMetaProfileUrl != null) {
		transformer.setParameter(&quot;practitionerMetaProfileUrl&quot;, practitionerMetaProfileUrl);
		globalMap.put(&apos;practitionerMetaProfileUrl&apos;, practitionerMetaProfileUrl);
		logger.info(&quot;practitionerMetaProfileUrl: &quot; + practitionerMetaProfileUrl);
	} else {
		var errorMessage = &apos;PROFILE_URL_QUESTIONNAIRE_RESPONSE variable is not set&apos;;
		logger.error(errorMessage);
		setErrorResponse(500, errorMessage); // Set the HTTP response status to 500 (Server error)
		throw errorMessage; // Stop further processing by throwing an exception
	}

	//Generate resource ids and set as parameter to pass to xslt 
	transformer = setResourceIdParameters(transformer);

	return transformer;
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.5.3">
          <name>API endpoint processing</name>
          <sequenceNumber>3</sequenceNumber>
          <enabled>true</enabled>
          <script>var fileContent = globalMap.get(&apos;fileContent&apos;);
var trimmed = fileContent.trim();
//Extension check
if (trimmed.includes(&quot;&lt;ClinicalDocument&quot;)) {
    logger.info(&quot;Detected XML content&quot;);
} else if (trimmed.length &lt; 500 &amp;&amp; /^[A-Za-z0-9\s.,\-]+$/.test(trimmed)) {
    logger.info(&quot;Detected plain text content&quot;);
} else {
    var errorMessage = &quot;Unsupported file type based on content. Only .xml and .txt formats are allowed.&quot;;
    setErrorResponse(400, errorMessage);
   // responseMap.put(&quot;finalResponse&quot;, JSON.stringify(getJsonInvalidOperationOutcome(errorMessage, &quot;unsupported-file&quot;)));
    throw new Error(errorMessage);
}

if (!globalMap.containsKey(&quot;ccdaService&quot;)) {
    var ccdaService = SpringContextHolder.getBean(Packages.org.techbd.service.ccda.CCDAService);
    globalMap.put(&quot;ccdaService&quot;, ccdaService);
}
var ccdaService = globalMap.get(&quot;ccdaService&quot;);
logger.info(&quot;***** ccdaService loaded successfully *****&quot;);

var requestedPath = sourceMap.get(&apos;contextPath&apos;);
logger.info(&quot;***** Request URL: &quot; + requestedPath + &quot; *****&quot;);

if (requestedPath == &quot;/&quot;) {
    return;
}

if (requestedPath == &quot;/ccda/Bundle/$validate/&quot; || requestedPath == &quot;/ccda/Bundle/$validate&quot;) {
    globalMap.put(&quot;endpoint&quot;, &quot;validate&quot;);

    try {
        var xmlContent = globalMap.get(&apos;fileContent&apos;);
        logger.info(&quot;XML Document:\n&quot; + xmlContent);

        var xmlDoc = xmlContent;
        logger.info(&quot;Parsed XML Document:\n&quot; + xmlDoc);

        var cdStartIndex = xmlDoc.trim().indexOf(&apos;&lt;ClinicalDocument&apos;);
        var cleanedXml = xmlDoc.substring(cdStartIndex);
        logger.info(&quot;Cleaned XML Document:\n&quot; + cleanedXml);

        if (!xmlDoc.includes(&apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&apos;)) {
            var clinicalDocumentIndex = xmlDoc.indexOf(&apos;&lt;ClinicalDocument&apos;);
            if (clinicalDocumentIndex !== -1) {
                xmlDoc = &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&apos; + xmlDoc.substring(clinicalDocumentIndex);
            }
        }
        logger.info(&quot;After xml tag added : &quot; + xmlDoc);

        var lastClosingTagIndex = xmlDoc.lastIndexOf(&apos;&gt;&apos;);
        if (lastClosingTagIndex !== xmlDoc.length - 1) {
            xmlDoc = xmlDoc.substring(0, lastClosingTagIndex + 1);
        }

        var xmlStartIndex = xmlDoc.trim().indexOf(&apos;&lt;?xml&apos;);
        var sourceXml = xmlDoc.substring(xmlStartIndex);

        if (!sourceXml || sourceXml.length === 0) {
            logger.error(&quot;No XML data received in the request.&quot;);
            responseMap.put(&apos;finalResponse&apos;, JSON.stringify(getJsonInvalidOperationOutcome(&quot;No XML data received in the request.&quot;)));
            throw new Error(&quot;No XML data received in the request.&quot;);
        }

        logger.info(&quot;Source XML Content: &quot; + sourceXml);

        // CRITICAL FIX: Replace the space in between &quot;X-SDOH-FLO-1570000066-Patient unable to answer&quot; with hyphen
        sourceXml = sourceXml.replace(/X-SDOH-FLO-1570000066-Patient unable to answer/g, &quot;X-SDOH-FLO-1570000066-Patient-unable-to-answer&quot;);
        sourceXml = sourceXml.replace(/X-SDOH-FLO-1570000066-Patient declined/g, &quot;X-SDOH-FLO-1570000066-Patient-declined&quot;);

       
        // These attributes can cause XSLT transformation errors when they appear after child elements
        sourceXml = sourceXml.replace(/\s+xmlns:xsi\s*=\s*&quot;[^&quot;]*&quot;/g, &apos;&apos;);
        sourceXml = sourceXml.replace(/\s+xsi:schemaLocation\s*=\s*&quot;[^&quot;]*&quot;/g, &apos;&apos;);
        sourceXml = sourceXml.replace(/\s+xsi:noNamespaceSchemaLocation\s*=\s*&quot;[^&quot;]*&quot;/g, &apos;&apos;);
        logger.info(&quot;Schema location attributes removed from XML&quot;);

        // Fix abstract value elements - replace with concrete types
        sourceXml = sourceXml.replace(/&lt;value\s*&gt;/g, &apos;&lt;value xsi:type=&quot;ST&quot;&gt;&apos;);
        sourceXml = sourceXml.replace(/&lt;value\s+([^&gt;]*?)&gt;/g, function(match, attrs) {
            if (!attrs.includes(&apos;xsi:type&apos;)) {
                return &apos;&lt;value xsi:type=&quot;ST&quot; &apos; + attrs + &apos;&gt;&apos;;
            }
            return match;
        });
        logger.info(&quot;Abstract value elements fixed with concrete types&quot;);

        // Re-add xsi namespace if we added xsi:type attributes
        if (sourceXml.includes(&apos;xsi:type&apos;) &amp;&amp; !sourceXml.includes(&apos;xmlns:xsi=&apos;)) {
            sourceXml = sourceXml.replace(/&lt;ClinicalDocument([^&gt;]*)&gt;/g, 
                &apos;&lt;ClinicalDocument xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;$1&gt;&apos;);
        }

        // ------------------------------------------------------
        // PHI FILTERING STEP (from dev)
        // ------------------------------------------------------
        var xsltPath = globalMap.get(&apos;cdaPhiFilter&apos;);
        logger.info(&quot;xsltPath: &quot; + xsltPath);

        var xsltFile = new java.io.File(xsltPath);
        var xsltStream = new java.io.FileInputStream(xsltFile);
        var transformerFactory = javax.xml.transform.TransformerFactory.newInstance();
        var xsltSource = new javax.xml.transform.stream.StreamSource(xsltStream);
        var transformer = transformerFactory.newTransformer(xsltSource);

        var xmlInputStream = new java.io.StringReader(sourceXml);
        var xmlOutputStream = new java.io.StringWriter();
        var originalCcdFile = new javax.xml.transform.stream.StreamSource(xmlInputStream);
        var phiFilterOutput = new javax.xml.transform.stream.StreamResult(xmlOutputStream);
        logger.info(&quot;****************&quot;);
        
        try {
            transformer.transform(originalCcdFile, phiFilterOutput);
            sourceXml = xmlOutputStream.toString();
            logger.info(&quot;PHI Filtered XML:\n&quot; + sourceXml);
        } catch (e) {
            var errorMsg = e instanceof JavaException
                ? &quot;CCD XML PHI filtering failed: &quot; + e.toString()
                : &quot;Unexpected error during PHI filtering: &quot; + e.message;
            responseMap.put(&apos;finalResponse&apos;, JSON.stringify(getJsonInvalidOperationOutcome(errorMsg, &quot;invalid&quot;)));
            logger.error(errorMsg);
            throw new Error(errorMsg);
        }

        // ------------------------------------------------------
        // VALIDATION
        // ------------------------------------------------------
        var xsdFilePath = globalMap.get(&apos;xsdFilePath&apos;);
        logger.info(&quot;Using XSD file path: &quot; + xsdFilePath);

        var xsdFile = new java.io.File(xsdFilePath);
        var schemaInputStream = new javax.xml.transform.stream.StreamSource(xsdFile);
        var schema = javax.xml.validation.SchemaFactory
            .newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI)
            .newSchema(schemaInputStream);

        var validator = schema.newValidator();
        var xmlSource = new javax.xml.transform.stream.StreamSource(new java.io.StringReader(sourceXml));
        var isValid = true;

        try {
            validator.validate(xmlSource);

            var successResponse = {
                &quot;OperationOutcome&quot;: {
                    &quot;validationResults&quot;: [
                        {
                            &quot;operationOutcome&quot;: {
                                &quot;resourceType&quot;: &quot;OperationOutcome&quot;,
                                &quot;issue&quot;: [
                                    {
                                        &quot;severity&quot;: &quot;information&quot;,
                                        &quot;code&quot;: &quot;informational&quot;,
                                        &quot;details&quot;: {
                                            &quot;text&quot;: &quot;CCD XML is valid according to the XSD.&quot;
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            };

            logger.info(&quot;***** STARTING DATABASE SAVE OPERATION *****&quot;);
            var interactionId = java.util.UUID.randomUUID().toString();
            logger.info(&quot;***** Generated interactionId: &quot; + interactionId + &quot; *****&quot;);
            logger.info(&quot;***** Using tenantId: &quot; + tenantId + &quot; *****&quot;);

            try {
                logger.info(&quot;***** Saving original CCD payload *****&quot;);
                var saveOriginalResult = ccdaService.saveOriginalCcdaPayload(
                    interactionId,
                    tenantId,
                    requestedPath,
                    sourceXml,
                    successResponse
                );

                if (saveOriginalResult) {
                    logger.info(&quot;***** Original CCD payload saved successfully! *****&quot;);
                } else {
                    logger.error(&quot;***** Failed to save original CCD payload! *****&quot;);
                }
            } catch (originalSaveError) {
                logger.error(&quot;***** Error saving original CCD payload: &quot; + originalSaveError.message + &quot; *****&quot;);
                logger.error(&quot;***** Exception type: &quot; + originalSaveError.getClass().getName() + &quot; *****&quot;);
                if (originalSaveError.getCause) {
                    logger.error(&quot;***** Cause: &quot; + originalSaveError.getCause() + &quot; *****&quot;);
                }
            }

            try {
                var success = ccdaService.saveValidation(
                    true,
                    interactionId,
                    tenantId,
                    requestedPath,
                    sourceXml,
                    successResponse
                );

                if (success) {
                    logger.info(&quot;***** CCDA validation result saved successfully! *****&quot;);
                } else {
                    logger.error(&quot;***** Failed to save CCDA validation result! *****&quot;);
                }
            } catch (dbError) {
                logger.error(&quot;***** Database save error: &quot; + dbError.message + &quot; *****&quot;);
            }

            responseMap.put(&apos;finalResponse&apos;, JSON.stringify(successResponse));
            logger.info(&quot;CCD XML is valid according to the XSD.&quot;);
            //return &apos;dest_bundle_validate&apos;;

        } catch (e) {
            var errorMsg = e instanceof JavaException
                ? &quot;CCD XML validation failed: &quot; + e.toString()
                : &quot;Unexpected error during validation: &quot; + e.message;

            var errorResponse = getJsonInvalidOperationOutcome(errorMsg, &quot;invalid&quot;);

            var interactionId = java.util.UUID.randomUUID().toString();
            try {
                var saveOriginalResult = ccdaService.saveOriginalCcdaPayload(
                    interactionId,
                    tenantId,
                    requestedPath,
                    sourceXml,
                    errorResponse
                );
                if (saveOriginalResult) {
                    logger.info(&quot;***** Original CCD payload saved successfully! *****&quot;);
                } else {
                    logger.error(&quot;***** Failed to save original CCD payload! *****&quot;);
                }
            } catch (originalSaveError) {
                logger.error(&quot;***** Error saving original CCD payload: &quot; + originalSaveError.message + &quot; *****&quot;);
                if (originalSaveError.getCause) {
                    logger.error(&quot;***** Cause: &quot; + originalSaveError.getCause() + &quot; *****&quot;);
                }
            }

            try {
                var success = ccdaService.saveValidation(
                    false,
                    interactionId,
                    tenantId,
                    requestedPath,
                    sourceXml,
                    errorResponse
                );

                if (success) {
                    logger.info(&quot;***** CCDA validation failure record saved successfully! *****&quot;);
                } else {
                    logger.error(&quot;***** Failed to save CCDA validation failure record! *****&quot;);
                }

            } catch (dbError) {
                logger.error(&quot;***** Database save error for validation failure: &quot; + dbError.message + &quot; *****&quot;);
            }

            responseMap.put(&apos;finalResponse&apos;, JSON.stringify(errorResponse));
            throw new Error(errorMsg);
        }

    } catch (e) {
        var errorMsg = &quot;Error processing XML file upload: &quot; + e.message;
        responseMap.put(&apos;finalResponse&apos;, JSON.stringify(getJsonInvalidOperationOutcome(errorMsg, &quot;exception&quot;)));
        logger.error(errorMsg);
        throw e;
    }

} else {
    var errorMsg = &quot;Invalid endpoint&quot;;
    responseMap.put(&apos;finalResponse&apos;, JSON.stringify(getJsonInvalidOperationOutcome(errorMsg, &quot;exception&quot;)));
    logger.info(&quot;Invalid endpoint: &quot; + requestedPath);
    throw new Error(&quot;Invalid endpoint: &quot; + requestedPath);
}

// ----------------------------
// Helper Functions
// ----------------------------
function getJsonInvalidOperationOutcome(errorMessage, code) {
    if (!code) {
        code = &quot;exception&quot;;
    }
    return {
        &quot;resourceType&quot;: &quot;OperationOutcome&quot;,
        &quot;issue&quot;: [
            {
                &quot;severity&quot;: &quot;error&quot;,
                &quot;code&quot;: code,
                &quot;details&quot;: {
                    &quot;text&quot;: errorMessage
                }
            }
        ]
    };
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.5.3">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.5.3">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.5.3">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.3">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.3">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="4.5.3">
      <elements>
        <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="4.5.3">
          <name>Accept message if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/ccda/Bundle/$validate&apos; or &apos;/ccda/Bundle/$validate/&apos;</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <field>sourceMap.get(&apos;contextPath&apos;)</field>
          <condition>EQUALS</condition>
          <values>
            <string>&apos;/ccda/Bundle/$validate&apos;</string>
            <string>&apos;/ccda/Bundle/$validate/&apos;</string>
          </values>
        </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
        <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="4.5.3">
          <name>Accept message if &quot;sourceMap.get(&apos;method&apos;)&quot; equals &apos;POST&apos;</name>
          <sequenceNumber>1</sequenceNumber>
          <enabled>true</enabled>
          <operator>AND</operator>
          <field>sourceMap.get(&apos;method&apos;)</field>
          <condition>EQUALS</condition>
          <values>
            <string>&apos;POST&apos;</string>
          </values>
        </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
      </elements>
    </filter>
    <transportName>HTTP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="4.5.3">
      <metaDataId>1</metaDataId>
      <name>dest_bundle_validate</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.5.3">
        <pluginProperties/>
        <destinationConnectorProperties version="4.5.3">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="4.5.3">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.3">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.3">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.3">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.3">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.5.3">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.3">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.3">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.3">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.3">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.5.3">
        <elements>
          <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="4.5.3">
            <name>Accept message if &quot;$(&apos;endpoint&apos;)&quot; equals &apos;validate&apos;</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <field>$(&apos;endpoint&apos;)</field>
            <condition>EQUALS</condition>
            <values>
              <string>&apos;validate&apos;</string>
            </values>
          </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
        </elements>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="4.5.3">
      <metaDataId>2</metaDataId>
      <name>dest_bundle</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="4.5.3">
        <pluginProperties>
          <com.mirth.connect.plugins.ssl.SSLSettingsProperties version="4.5.3">
  <sslEnabled>false</sslEnabled>
            <mutualTlsEnabled>false</mutualTlsEnabled>
            <verifyHostname>false</verifyHostname>
            <keystorePath/>
            <keystorePassword/>
            <certAlias/>
            <certPassword/>
            <truststorePath/>
            <truststorePassword/>
            <tls13>true</tls13>
            <tls12>true</tls12>
            <tls11>true</tls11>
            <keystoreType/>
            <truststoreType/>
            <keystoreSettingFromSystem>false</keystoreSettingFromSystem>
            <keystoreUid/>
            <myCertificateAlias/>
            <truststoreSettingFromSystem>false</truststoreSettingFromSystem>
            <truststoreUid/>
          </com.mirth.connect.plugins.ssl.SSLSettingsProperties>
        </pluginProperties>
        <destinationConnectorProperties version="4.5.3">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <host>${fhirBundleSubmissionApiUrl}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map">
          <entry>
            <string>X-TechBD-Tenant-ID</string>
            <list>
              <string>${tenantId}</string>
            </list>
          </entry>
          <entry>
            <string>Content-Type</string>
            <list>
              <string>application/fhir+json</string>
            </list>
          </entry>
          <entry>
            <string>User-Agent</string>
            <list>
              <string>${userAgent}</string>
            </list>
          </entry>
          <entry>
            <string>X-TechBD-Override-Request-URI</string>
            <list>
              <string>${uri}</string>
            </list>
          </entry>
          <entry>
            <string>Access-Control-Allow-Origin</string>
            <list>
              <string>*</string>
            </list>
          </entry>
          <entry>
            <string>Access-Control-Allow-Methods</string>
            <list>
              <string>GET, POST, OPTIONS</string>
            </list>
          </entry>
          <entry>
            <string>Access-Control-Allow-Headers</string>
            <list>
              <string>Content-Type, Authorization, X-TechBD-Tenant-ID, User-Agent, X-TechBD-REMOTE-IP, X-TechBD-Override-Request-URI, accept </string>
            </list>
          </entry>
          <entry>
            <string>Access-Control-Allow-Credentials</string>
            <list>
              <string>true</string>
            </list>
          </entry>
          <entry>
            <string>X-TechBD-REMOTE-IP</string>
            <list>
              <string>${uri}</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map">
          <entry>
            <string>source</string>
            <list>
              <string>CCDA</string>
            </list>
          </entry>
        </parameters>
        <useHeadersVariable>false</useHeadersVariable>
        <headersVariable></headersVariable>
        <useParametersVariable>false</useParametersVariable>
        <parametersVariable></parametersVariable>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/fhir+json</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${jsonResult}</content>
        <contentType>application/fhir+json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>300000</socketTimeout>
      </properties>
      <transformer version="4.5.3">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.3">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.3">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.3">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.3">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.5.3">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.3">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.3">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.3">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.3">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.5.3">
        <elements>
          <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="4.5.3">
            <name>Accept message if &quot;$(&apos;endpoint&apos;)&quot; equals &apos;bundle&apos;</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <field>$(&apos;endpoint&apos;)</field>
            <condition>EQUALS</condition>
            <values>
              <string>&apos;bundle&apos;</string>
            </values>
          </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
        </elements>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Set default source for this channel

var requestParameters = channelMap.get(&quot;requestParameters&quot;);
var SourceType = Packages.org.techbd.config.SourceType;
var source = SourceType.CCDA.name(); 

requestParameters.put(Packages.org.techbd.config.Constants.SOURCE_TYPE, source.trim());

return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

//Version: 0.4.3 - Added support for X-TechBD-Base-FHIR-URL

//var endpoint = globalMap.get(&quot;endpoint&quot;);
//if(endpoint == &apos;bundle&apos;) {
//	// Get the response from the HTTP Writer destination
//	var destinationName = &quot;dest_bundle&quot;;
//	var destinationResponse = responseMap.get(destinationName);
//	
//	// Check if the response exists
//	if (destinationResponse) {
//	    var responseStatus = destinationResponse.getStatus();  // HTTP status code
//	    var responseData = destinationResponse.getMessage();   // Response message body
//		responseMap.put(&apos;finalResponse&apos;, responseData);
//		
//	    // Log the response details
//	    logger.info(&quot;Response from &quot; + destinationName + &quot;:&quot;);
//	    logger.info(&quot;Status Code: &quot; + responseStatus);
//	    logger.info(&quot;Response Data: &quot; + responseData);
//	} else {
//	    logger.info(&quot;No response found for destination: &quot; + destinationName);
//	}
//}

return;</postprocessingScript>
  <deployScript>
return;
</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="4.5.3">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <encryptAttachments>false</encryptAttachments>
    <encryptCustomMetaData>false</encryptCustomMetaData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="4.5.3">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1753092623486</time>
        <timezone>Asia/Calcutta</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
      <userId>1</userId>
    </metadata>
  </exportData>
</channel>